"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TripMutation = exports.TripQuery = void 0;

var _graphql = require("graphql");

var _trip = _interopRequireDefault(require("./trip.model"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PointType = new _graphql.GraphQLObjectType({
  name: 'Point',
  fields: function fields() {
    return {
      coordinates: {
        type: new _graphql.GraphQLList(_graphql.GraphQLInt)
      }
    };
  }
});
var PointMutType = new _graphql.GraphQLInputObjectType({
  name: 'PointMutation',
  fields: function fields() {
    return {
      coordinates: {
        type: new _graphql.GraphQLList(_graphql.GraphQLInt)
      }
    };
  }
});
var gqInt = {
  type: _graphql.GraphQLInt
};
var TripType = new _graphql.GraphQLObjectType({
  name: 'Trip',
  fields: function fields() {
    return {
      id: {
        type: _graphql.GraphQLID
      },
      origin: {
        type: PointType
      },
      destination: {
        type: PointType
      },
      distance: gqInt,
      estBudget: gqInt,
      likes: gqInt,
      rating: gqInt
    };
  }
});
var TripQuery = {
  "trip": {
    type: TripType,
    args: {
      id: {
        type: _graphql.GraphQLID
      }
    },
    resolve: function resolve(parent, args) {
      //return _.find(books,{id: args.id});
      return _trip.default.get(args.id);
    }
  },
  'trips': {
    type: new _graphql.GraphQLList(TripType),
    resolve: function resolve(parent, args) {
      //return books;
      return _trip.default.list();
    }
  }
};
exports.TripQuery = TripQuery;
var TripMutation = {
  "addTrip": {
    type: TripType,
    args: {
      origin: {
        type: PointMutType
      },
      destination: {
        type: PointMutType
      },
      distance: gqInt,
      estBudget: gqInt,
      likes: gqInt,
      rating: gqInt
    },
    resolve: function resolve(parent, args) {
      console.log(args);
      var trip = new _trip.default({
        origin: args.origin
      });
      return trip.save();
    }
  }
};
exports.TripMutation = TripMutation;
var _default = {
  TripQuery: TripQuery,
  TripMutation: TripMutation
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci90cmlwL3RyaXAudHlwZS50cyJdLCJuYW1lcyI6WyJQb2ludFR5cGUiLCJHcmFwaFFMT2JqZWN0VHlwZSIsIm5hbWUiLCJmaWVsZHMiLCJjb29yZGluYXRlcyIsInR5cGUiLCJHcmFwaFFMTGlzdCIsIkdyYXBoUUxJbnQiLCJQb2ludE11dFR5cGUiLCJHcmFwaFFMSW5wdXRPYmplY3RUeXBlIiwiZ3FJbnQiLCJUcmlwVHlwZSIsImlkIiwiR3JhcGhRTElEIiwib3JpZ2luIiwiZGVzdGluYXRpb24iLCJkaXN0YW5jZSIsImVzdEJ1ZGdldCIsImxpa2VzIiwicmF0aW5nIiwiVHJpcFF1ZXJ5IiwiYXJncyIsInJlc29sdmUiLCJwYXJlbnQiLCJUcmlwIiwiZ2V0IiwibGlzdCIsIlRyaXBNdXRhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJ0cmlwIiwic2F2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsSUFBTUEsU0FBUyxHQUFHLElBQUlDLDBCQUFKLENBQXNCO0FBQ3ZDQyxFQUFBQSxJQUFJLEVBQUUsT0FEaUM7QUFFdkNDLEVBQUFBLE1BQU0sRUFBRTtBQUFBLFdBQU87QUFDWkMsTUFBQUEsV0FBVyxFQUFFO0FBQ1RDLFFBQUFBLElBQUksRUFBRSxJQUFJQyxvQkFBSixDQUFnQkMsbUJBQWhCO0FBREc7QUFERCxLQUFQO0FBQUE7QUFGK0IsQ0FBdEIsQ0FBbEI7QUFTQSxJQUFNQyxZQUFZLEdBQUcsSUFBSUMsK0JBQUosQ0FBMkI7QUFDL0NQLEVBQUFBLElBQUksRUFBRSxlQUR5QztBQUUvQ0MsRUFBQUEsTUFBTSxFQUFFO0FBQUEsV0FBTztBQUNaQyxNQUFBQSxXQUFXLEVBQUU7QUFDVEMsUUFBQUEsSUFBSSxFQUFFLElBQUlDLG9CQUFKLENBQWdCQyxtQkFBaEI7QUFERztBQURELEtBQVA7QUFBQTtBQUZ1QyxDQUEzQixDQUFyQjtBQVNBLElBQU1HLEtBQUssR0FBRztBQUNiTCxFQUFBQSxJQUFJLEVBQUVFO0FBRE8sQ0FBZDtBQUlBLElBQU1JLFFBQVEsR0FBRyxJQUFJViwwQkFBSixDQUFzQjtBQUN0Q0MsRUFBQUEsSUFBSSxFQUFFLE1BRGdDO0FBRXRDQyxFQUFBQSxNQUFNLEVBQUU7QUFBQSxXQUFNO0FBQ1hTLE1BQUFBLEVBQUUsRUFBRTtBQUNGUCxRQUFBQSxJQUFJLEVBQUVRO0FBREosT0FETztBQUlYQyxNQUFBQSxNQUFNLEVBQUU7QUFDTlQsUUFBQUEsSUFBSSxFQUFFTDtBQURBLE9BSkc7QUFPWGUsTUFBQUEsV0FBVyxFQUFFO0FBQ1hWLFFBQUFBLElBQUksRUFBRUw7QUFESyxPQVBGO0FBVVhnQixNQUFBQSxRQUFRLEVBQUVOLEtBVkM7QUFXWE8sTUFBQUEsU0FBUyxFQUFFUCxLQVhBO0FBWVhRLE1BQUFBLEtBQUssRUFBRVIsS0FaSTtBQWFYUyxNQUFBQSxNQUFNLEVBQUVUO0FBYkcsS0FBTjtBQUFBO0FBRjhCLENBQXRCLENBQWpCO0FBbUJPLElBQU1VLFNBQVMsR0FBRztBQUN4QixVQUFRO0FBQ1BmLElBQUFBLElBQUksRUFBRU0sUUFEQztBQUVQVSxJQUFBQSxJQUFJLEVBQUU7QUFDTFQsTUFBQUEsRUFBRSxFQUFFO0FBQUVQLFFBQUFBLElBQUksRUFBRVE7QUFBUjtBQURDLEtBRkM7QUFLUFMsSUFBQUEsT0FMTyxtQkFLQ0MsTUFMRCxFQUtjRixJQUxkLEVBS3dCO0FBQzlCO0FBQ0EsYUFBT0csY0FBS0MsR0FBTCxDQUFTSixJQUFJLENBQUNULEVBQWQsQ0FBUDtBQUNBO0FBUk0sR0FEZ0I7QUFXeEIsV0FBUztBQUNSUCxJQUFBQSxJQUFJLEVBQUUsSUFBSUMsb0JBQUosQ0FBZ0JLLFFBQWhCLENBREU7QUFFUlcsSUFBQUEsT0FGUSxtQkFFQUMsTUFGQSxFQUVhRixJQUZiLEVBRXVCO0FBQzlCO0FBQ0EsYUFBT0csY0FBS0UsSUFBTCxFQUFQO0FBQ0E7QUFMTztBQVhlLENBQWxCOztBQW9CQSxJQUFNQyxZQUFZLEdBQUc7QUFDM0IsYUFBVztBQUNKdEIsSUFBQUEsSUFBSSxFQUFFTSxRQURGO0FBRUpVLElBQUFBLElBQUksRUFBRTtBQUNGUCxNQUFBQSxNQUFNLEVBQUU7QUFDSlQsUUFBQUEsSUFBSSxFQUFFRztBQURGLE9BRE47QUFJRk8sTUFBQUEsV0FBVyxFQUFFO0FBQ1RWLFFBQUFBLElBQUksRUFBRUc7QUFERyxPQUpYO0FBT0ZRLE1BQUFBLFFBQVEsRUFBRU4sS0FQUjtBQVFGTyxNQUFBQSxTQUFTLEVBQUVQLEtBUlQ7QUFTRlEsTUFBQUEsS0FBSyxFQUFFUixLQVRMO0FBVUZTLE1BQUFBLE1BQU0sRUFBRVQ7QUFWTixLQUZGO0FBY0pZLElBQUFBLE9BZEksbUJBY0lDLE1BZEosRUFjaUJGLElBZGpCLEVBYzJCO0FBQ3ZCTyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVIsSUFBWjtBQUNBLFVBQUlTLElBQUksR0FBRyxJQUFJTixhQUFKLENBQVM7QUFDbEJWLFFBQUFBLE1BQU0sRUFBRU8sSUFBSSxDQUFDUDtBQURLLE9BQVQsQ0FBWDtBQUdBLGFBQU9nQixJQUFJLENBQUNDLElBQUwsRUFBUDtBQUNQO0FBcEJHO0FBRGdCLENBQXJCOztlQXlCUTtBQUFFWCxFQUFBQSxTQUFTLEVBQVRBLFNBQUY7QUFBYU8sRUFBQUEsWUFBWSxFQUFaQTtBQUFiLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTElELCBHcmFwaFFMSW50LCBHcmFwaFFMSW5wdXRPYmplY3RUeXBlLCBHcmFwaFFMTGlzdCB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgVHJpcCBmcm9tIFwiLi90cmlwLm1vZGVsXCI7XG5cbmNvbnN0IFBvaW50VHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG5cdG5hbWU6ICdQb2ludCcsXG5cdGZpZWxkczogKCkgPT4gKHtcbiAgICBjb29yZGluYXRlczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QoR3JhcGhRTEludClcbiAgICB9XG5cdH0pXG59KTtcblxuY29uc3QgUG9pbnRNdXRUeXBlID0gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuXHRuYW1lOiAnUG9pbnRNdXRhdGlvbicsXG5cdGZpZWxkczogKCkgPT4gKHtcbiAgICBjb29yZGluYXRlczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QoR3JhcGhRTEludClcbiAgICB9XG5cdH0pXG59KTtcblxuY29uc3QgZ3FJbnQgPSB7XG5cdHR5cGU6IEdyYXBoUUxJbnRcbn1cblxuY29uc3QgVHJpcFR5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuXHRuYW1lOiAnVHJpcCcsXG5cdGZpZWxkczogKCkgPT4oe1xuICAgIGlkOiB7XG4gICAgICB0eXBlOiBHcmFwaFFMSURcbiAgICB9LFxuICAgIG9yaWdpbjoge1xuICAgICAgdHlwZTogUG9pbnRUeXBlXG4gICAgfSxcbiAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgdHlwZTogUG9pbnRUeXBlXG4gICAgfSxcbiAgICBkaXN0YW5jZTogZ3FJbnQsXG4gICAgZXN0QnVkZ2V0OiBncUludCxcbiAgICBsaWtlczogZ3FJbnQsXG4gICAgcmF0aW5nOiBncUludFxuICB9KVxufSk7XG5cbmV4cG9ydCBjb25zdCBUcmlwUXVlcnkgPSB7XG5cdFwidHJpcFwiOiB7XG5cdFx0dHlwZTogVHJpcFR5cGUsXG5cdFx0YXJnczoge1xuXHRcdFx0aWQ6IHsgdHlwZTogR3JhcGhRTElEIH1cblx0XHR9LFxuXHRcdHJlc29sdmUocGFyZW50OiBhbnksIGFyZ3M6IGFueSl7XG5cdFx0XHQvL3JldHVybiBfLmZpbmQoYm9va3Mse2lkOiBhcmdzLmlkfSk7XG5cdFx0XHRyZXR1cm4gVHJpcC5nZXQoYXJncy5pZCk7XG5cdFx0fVxuXHR9LFxuXHQndHJpcHMnOiB7XG5cdFx0dHlwZTogbmV3IEdyYXBoUUxMaXN0KFRyaXBUeXBlKSxcblx0XHRyZXNvbHZlKHBhcmVudDogYW55LCBhcmdzOiBhbnkpe1xuXHRcdFx0Ly9yZXR1cm4gYm9va3M7XG5cdFx0XHRyZXR1cm4gVHJpcC5saXN0KCk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBUcmlwTXV0YXRpb24gPSB7XG5cdFwiYWRkVHJpcFwiOiB7XG4gICAgICAgIHR5cGU6IFRyaXBUeXBlLFxuICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgICBvcmlnaW46IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBQb2ludE11dFR5cGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFBvaW50TXV0VHlwZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBncUludCxcbiAgICAgICAgICAgIGVzdEJ1ZGdldDogZ3FJbnQsXG4gICAgICAgICAgICBsaWtlczogZ3FJbnQsXG4gICAgICAgICAgICByYXRpbmc6IGdxSW50XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmUocGFyZW50OiBhbnksIGFyZ3M6IGFueSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXJncyk7XG4gICAgICAgICAgICAgICAgbGV0IHRyaXAgPSBuZXcgVHJpcCh7XG4gICAgICAgICAgICAgICAgICBvcmlnaW46IGFyZ3Mub3JpZ2luXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyaXAuc2F2ZSgpO1xuICAgICAgICB9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBUcmlwUXVlcnksIFRyaXBNdXRhdGlvbiB9O1xuIl19